esphome:
  name: esphome-web-a69f8c
  friendly_name: ESPKakkaKaivo
  min_version: 2025.9.0
  name_add_mac_suffix: false

esp32:
  variant: esp32
  framework:
    type: esp-idf

# Enable logging
logger:

# Enable Home Assistant API
api:

# Allow Over-The-Air updates
ota:
- platform: esphome

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true
  power_save_mode: light

# Deep Sleep with Hibernation Mode
deep_sleep:
  id: deep_sleep_control
  run_duration: 20s  # Stay awake for 20 seconds to take measurements
  sleep_duration: ${sleep_minutes}min

substitutions:
  tank_empty_cm: "120"   # distance from sensor to liquid when EMPTY
  tank_full_cm:  "30"    # distance from sensor to liquid when FULL
  measure_count: "10"      # how many samples per wake
  sleep_minutes: "1"     # how often to wake

sensor:
  # Raw distance (smoothed & in cm)
  - platform: ultrasonic
    id: tank_distance_cm
    name: "Septic Distance"
    trigger_pin: GPIO18
    echo_pin: GPIO19          # through 10k/4.7k divider (Echo is 5V)
    pulse_time: 40us          # JSN-SR04T likes >= 20us; 30–60us is fine
    timeout: 7m               # distance, not time
    update_interval: 2s
    unit_of_measurement: "cm"
    accuracy_decimals: 1
    filters:
      - filter_out: nan
      - multiply: 100.0       # m -> cm
      - median:
          window_size: 7      # was 9; reduce if you want snappier updates
          send_every: 1
          send_first_at: 1

      # ignore impossible/outlier values (blind zone <25 cm, absurd long >700 cm)
      - lambda: |-
          if (isnan(x)) return x;
          if (x < 25.0 || x > 700.0) return NAN;
          return x;

  # Derived % full
  - platform: template
    id: tank_percent
    name: "Septic Level"
    unit_of_measurement: "%"
    accuracy_decimals: 0
    update_interval: 2s
    lambda: |-
      if (isnan(id(tank_distance_cm).state)) return NAN;
      const float empty_cm = ${tank_empty_cm};
      const float full_cm  = ${tank_full_cm};
      float d = id(tank_distance_cm).state;           // current distance in cm
      // Map distance -> % full, clamp 0..100
      float pct = (empty_cm - d) * 100.0f / (empty_cm - full_cm);
      if (pct < 0)   pct = 0;
      if (pct > 100) pct = 100;
      return pct;
    icon: "mdi:water-percent"

# Script to configure hibernation mode before sleep
script:
  - id: enter_hibernation
    then:
      - logger.log: "Configuring hibernation mode for ultra-low power..."
      - lambda: |-
          // HIBERNATION MODE - Ultra low power (~2.5-5μA)
          ESP_LOGI("hibernation", "Powering down all RTC domains except timer");

          // Power down all RTC domains except timer
          esp_sleep_pd_config(ESP_PD_DOMAIN_RTC_PERIPH, ESP_PD_OPTION_OFF);
          esp_sleep_pd_config(ESP_PD_DOMAIN_RTC_SLOW_MEM, ESP_PD_OPTION_OFF);
          esp_sleep_pd_config(ESP_PD_DOMAIN_RTC_FAST_MEM, ESP_PD_OPTION_OFF);
          esp_sleep_pd_config(ESP_PD_DOMAIN_XTAL, ESP_PD_OPTION_OFF);

          // Disable all wakeup sources except timer (deep_sleep component handles timer)
          esp_sleep_disable_wakeup_source(ESP_SLEEP_WAKEUP_ALL);

# Trigger hibernation before sleep
interval:
  - interval: 18s  # After 18 seconds, prepare to enter hibernation
    then:
      - logger.log: "Measurements complete, entering hibernation..."
      - script.execute: enter_hibernation
      - deep_sleep.enter: deep_sleep_control
